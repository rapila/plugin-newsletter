Widget.types.newsletter_detail = {
	
	prepare: function() {
		Widget.handle('rapila-mailing_list_changed', this.fill_data.bind(this));
	},
	
	initialize: function() {
		this.init_content();
		var _this = this;
		this.newsletter_mailing_prototype = jQuery.parseHTML("{{includeTemplate=newsletter_mailing}}", true, 'tbody');
		this.content.find('.hide_if_not_saved').hide();

		Widget.create('detail', function(widget) {
			_this.detail_widget = widget.set_instance(_this);
			jQuery.extend(widget.settings, {
				title: "{{writeString=wns.new_entry}}",
				width: 760
			});
			_this.content.find('div.accordion').accordion({active: 0, autoHeight: false, clearStyle: true, collapsible:false});
			
			var allow_load_template = _this.auto_open; // add other conditions for loading template apart from is new
			var template_select = _this.content.find("select[name='template_name']").change(function() {
				if(allow_load_template) {
					_this.update_newsletter_body(template_select.val());
				}
			});
			if(!allow_load_template) {
				template_select.after(jQuery('<span>', {className: 'ui-icon ui-icon-refresh', css: {cursor: 'pointer'}, click: function() {
					Widget.confirm('{{writeString=wns.newsletter.template-force-refresh.title}}', '{{writeString=wns.newsletter.template-force-refresh.message}}', function(answer) {
						if(answer) {
							_this.update_newsletter_body(template_select.val());
						}
					});
				}}));
			}
			// prepare template options
			var option = jQuery('<option/>');
			jQuery.each(_this.getMatchingCustomTemplates(), function(i, template) {
				option.clone().text(template).attr('value', template).appendTo(template_select);
			});
			jQuery('<option/>').text("{{writeString=wns.newsletter.choose_template}}").val('').prependTo(template_select);
			template_select.find("option:first-child").attr('selected', true);

			widget.handle('opening-initial', function() {
				_this.init_textareas();
			});

			if(_this.auto_open) {
				_this.open();
			}
		});
		
		this.handle('saving', function(event, data) {
			var text = this.get_newsletter_text();
			if(text.data('widget')) {
				data.newsletter_body = text.data('widget').get_data();
			}
			this.detail_widget.clear_validation();
		}.bind(this));
	},
	
	open: function() {
		if(!this.detail_widget) {
			this.auto_open = true;
			return false;
		}
		this.detail_widget.open();
	},
	
	init_content: function() {
		this.content = jQuery.parseHTML("{{includeTemplate=edit}}");
		this.content.find("select[name='language_id']").prepareWidget(function(widget) {
			widget.settings.international_option = false;
		}, jQuery.noop);
	},
	
	send_info_text: function(is_hot) {
		var send_info_text = this.content.find('span.status_send_info');
		if(is_hot) {
			send_info_text.text("{{writeString=wns.newsletter.send_hot_info}}");
		} else {
			send_info_text.text("{{writeString=wns.newsletter.send_test_info}}");
		}
	},
	
	fill_data: function() {
		var _this = this;
		this.loadNewsletterData(function(newsletter_data) {
			this.content.find("input[name='subject']").val(newsletter_data.Subject);
			this.content.find("select[name='language_id']").val(newsletter_data.LanguageId || '');
			this.content.find("select[name='template_name']").val(newsletter_data.TemplateName || '');
			this.content.find(".updated_info").text(newsletter_data.UpdatedInfo);
			this.content.find(".created_info").text(newsletter_data.CreatedInfo);
			this.content.find("span[class='detail_id']").text(newsletter_data.Id);
		
			this.newsletter_send_button = jQuery(this.content.find('.newsletter_send_button')).button().click(function() {
				_this.send_newsletter('send', newsletter_data.Id);
			});
		
			this.newsletter_test_button = jQuery(this.content.find('.newsletter_send_test_button')).button().click(function() {
				_this.send_newsletter('test', newsletter_data.Id);
			});

			// is_approved change handler
			var is_approved = this.content.find("input[name='is_approved']");
			is_approved.bind('change', function() {
				var is_approved_checked = jQuery(this).prop('checked');
				_this.send_info_text(is_approved_checked);
				_this.newsletter_send_button.prop('disabled', !is_approved_checked);
			}).prop('checked', newsletter_data.IsApproved).change();
		
			// newsletter mailings
			var mailing_list = this.content.find(".mailing_list").empty();
			var has_mailings = false;
			jQuery.each(newsletter_data.newsletter_mailings, function(i, params) {
				var newsletter_mailing = _this.newsletter_mailing_prototype.clone();
				newsletter_mailing.find('.date_sent').text(params.DateSent);
				newsletter_mailing.find('.mail_group_info').text(params.MailGroupType+' : '+params.MailGroupName);
				newsletter_mailing.find('.user_initials').text(params.UserInitials);
				newsletter_mailing.find('.recipient_count').text(params.RecipientCount);
				mailing_list.append(newsletter_mailing);	
				has_mailings = true;	
			});
		
			if(!has_mailings) {
				var no_entry_row = jQuery('<tr/>').html(jQuery("<td/>").attr("colspan", 4).text("{{writeString=newsletter_mailing.no_entries}}"));
				mailing_list.append(no_entry_row);
			}
		
			this.send_info_text(newsletter_data.IsApproved);
			this.update_newsletter_body();
			this.detail_widget.set_title(this.detail_widget.settings.title = "{{writeString=wns.newsletter}} "+newsletter_data.Subject);
			this.content.find('.hide_if_not_saved').show();
		});
	},
	
	send_newsletter: function(action, newsletter_id) {
		Widget.create('newsletter_send', function(send_widget) {
			send_widget.setNewsletterId(newsletter_id);
			if(action === 'send') {
				send_widget.show_send_dialog();
			} else {
				send_widget.show_test_dialog();
			}
		});
	},
	
	init_textareas: function() {
		var newsletter_text = this.get_newsletter_text();
		if(!newsletter_text.attr('data-widget-type')) {
			newsletter_text.attr('data-widget-type', 'rich_text').attr('data-widget-session', this.settings.rich_text_session).prepareWidget(function(widget) {
				widget.settings.height = 400;
			}, jQuery.noop, this.settings.rich_text_config);
		}
	},
	
	update_newsletter_body: function(newsletter_template) {
		var _this = this;
		var newsletter_body = this.getNewsletterBody(newsletter_template);
		var newsletter_text = this.get_newsletter_text();
		newsletter_text.ensureWidget(function(widget) {
			widget.set_data(newsletter_body);
			_this.newsletterContentCss(newsletter_template, function(css) {
				widget.set_inline_css(css);
			});
		});
	},
	
	get_newsletter_text: function() {
		return this.content.find('div.newsletter_body');
	},

	close: function() {
		this.detail_widget.close();
		this.close_callback();
	},
	
	save_callback: jQuery.noop,
	close_callback: jQuery.noop
};
